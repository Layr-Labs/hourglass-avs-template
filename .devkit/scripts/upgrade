#!/usr/bin/env bash

set -e

originalProjectDir=$1

if [ -z "$originalProjectDir" ]; then
    log "Usage: $0 <original_project_dir>"
    exit 1
fi

# source in helper functions
source "$( dirname "${BASH_SOURCE[0]}" )/helpers/helpers.sh"

log "Starting template upgrade process..."
set +e
cd $originalProjectDir
if [ -n "$(git status --porcelain)" ]; then
    log "Uncommitted changes found, please commit or stash them before upgrading"
    git status --short
    exit 1
else
    log "Working directory clean, continuing with upgrade..."
fi
set -e

cd -

# Get the directory where the script is located
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"

# Navigate to the parent directories to find .devkit
PROJECT_BASE_DIR="$(dirname "$(dirname "$SCRIPT_DIR")")"

# check if .devkit/contracts/.git exists
if [[ ! -d "$originalProjectDir/.devkit/contracts/.git" ]]; then
    cd $originalProjectDir
    log "cd to '$originalProjectDir'"
    log ".devkit/contracts is still a git submodule, removing"

    log "running submodule deinit.."
    git submodule deinit -f .devit/contracts || true

    log "removing submodule .devkit/contracts from git config.."
    git rm -rf .devkit/contracts || true

    log "removing .devkit/contracts directory.."
    rm -rf .devkit/contracts || true

    log "removing .devkit/contracts/.git directory.."
    rm -rf .git/modules/.devkit/contracts || true


    set +e
    if [ -n "$(git status --porcelain)" ]; then
        log "staging and committing changes.."
        git add .
        git commit -m 'chore: removed .devkit/contracts submodule as part of upgrade'
    fi
    set -e
    cd -
fi
log "Updating .devkit/contracts from git submodule to regular directory..."
cp -rfv "${PROJECT_BASE_DIR}/.devkit/contracts" $originalProjectDir/.devkit

# Copy everything from .devkit except for ./contracts
for item in "${PROJECT_BASE_DIR}/.devkit/"*; do
  [ "$(basename "$item")" = "contracts" ] && continue
  cp -rfv "$item" "$originalProjectDir/.devkit/"
done

# Copy the rest of the template
cp -rfv "${PROJECT_BASE_DIR}/.hourglass" $originalProjectDir
cp -rfv "${PROJECT_BASE_DIR}/Dockerfile" $originalProjectDir
cp -rfv "${PROJECT_BASE_DIR}/contracts/" $originalProjectDir/contracts

log "Updating submodules..."
git submodule update --init --recursive

log "Upgrade complete!"



