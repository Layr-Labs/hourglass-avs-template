#!/usr/bin/env bash
set -e

# source in helper functions
source "$( dirname "${BASH_SOURCE[0]}" )/helpers/helpers.sh"


# Check if context parameter is provided
if [ -z "$1" ]; then
    log "Error: Missing context parameter"
    log "Usage: ./run '{\"version\":\"0.0.1\",\"context\":{...}}'"
    exit 1
fi

# Parse the JSON context
CONTEXT="$1"

# Check for required tools
ensureJq
ensureYq
ensureGomplate

ENVIRONMENT=$(echo "$CONTEXT" | jq -r '.context.name')
if [ "$ENVIRONMENT" == "null" ] || [ -z "$ENVIRONMENT" ]; then
    log "Error: Missing name (environment) in context"
    exit 1
fi
hourglassContextConfigPath="$( dirname "${BASH_SOURCE[0]}" )/../../.hourglass/context/${ENVIRONMENT}.yaml"
contextConfig="$(cat $hourglassContextConfigPath | yq -o json)"

log "Starting AVS components for environment: $ENVIRONMENT"

function readOperatorBlsKeystore() {
    cat $(realpath $1) | jq -r '.'
}

function loadBlsKeysForAllOperators() {
    local opCount ksCount i j blsKeystorePath blsKeyContents
    opCount=$(jq -r '.context.operators | length' <<<"$CONTEXT")
    for ((i=0; i<opCount; i++)); do
        ksCount=$(jq -r ".context.operators[$i].keystores | length // 0" <<<"$CONTEXT")
        for ((j=0; j<ksCount; j++)); do
            blsKeystorePath=$(jq -r ".context.operators[$i].keystores[$j].bls_keystore_path // empty" <<<"$CONTEXT")
            if [[ -n "$blsKeystorePath" && -f "$blsKeystorePath" ]]; then
                blsKeyContents=$(readOperatorBlsKeystore "$blsKeystorePath" | jq -c '.')
                CONTEXT=$(jq --argjson c "$blsKeyContents" \
                    ".context.operators[$i].keystores[$j].bls_key_contents = \$c" <<<"$CONTEXT")
            fi
        done
    done
}

# Load ECDSA keys from keystores
function loadECDSAKeysForAllOperators() {
    local opCount ksCount i j ecdsaKeystorePath ecdsaKeystoreContents
    opCount=$(jq -r '.context.operators | length' <<<"$CONTEXT")
    for ((i=0; i<opCount; i++)); do
        ksCount=$(jq -r ".context.operators[$i].keystores | length // 0" <<<"$CONTEXT")
        for ((j=0; j<ksCount; j++)); do
            ecdsaKeystorePath=$(jq -r ".context.operators[$i].keystores[$j].ecdsa_keystore_path // empty" <<<"$CONTEXT")
            if [[ -n "$ecdsaKeystorePath" && -f "$ecdsaKeystorePath" ]]; then
                ecdsaKeystoreContents=$(jq -c '.' "$ecdsaKeystorePath")
                CONTEXT=$(jq --argjson c "$ecdsaKeystoreContents" \
                    ".context.operators[$i].keystores[$j].ecdsa_keystore_contents = \$c" <<<"$CONTEXT")
            fi
        done
    done
}

loadBlsKeysForAllOperators
loadECDSAKeysForAllOperators

# construct rpc_urls for environment
L1_RPC_URL=$(echo $CONTEXT | jq -r '.context.chains.l1.rpc_url')
L1_DOCKER_RPC_URL=$(ensureDockerHost "$L1_RPC_URL")
L2_RPC_URL=$(echo $CONTEXT | jq -r '.context.chains.l2.rpc_url')
L2_DOCKER_RPC_URL=$(ensureDockerHost "$L2_RPC_URL")

# return rpc_urls to context
CONTEXT=$(echo $CONTEXT | jq --arg url "$L1_DOCKER_RPC_URL" '.context.chains.l1.rpc_url = $url')
CONTEXT=$(echo $CONTEXT | jq --arg url "$L2_DOCKER_RPC_URL" '.context.chains.l2.rpc_url = $url')

# set aggregator and executor
CONTEXT=$(echo $CONTEXT | jq --argjson contextConfig "$contextConfig" '.aggregator = $contextConfig.aggregator')
CONTEXT=$(echo $CONTEXT | jq --argjson contextConfig "$contextConfig" '.executor = $contextConfig.executor')

deployedL1Contracts=$(echo $CONTEXT | jq -r '.context.deployed_l1_contracts')
deployedL2Contracts=$(echo $CONTEXT | jq -r '.context.deployed_l2_contracts')
if [ "$deployedL1Contracts" == "null" ] || [ -z "$deployedL1Contracts" ] || [ "$deployedL2Contracts" == "null" ] || [ -z "$deployedL2Contracts" ]; then
    log "Error: Need to deploy contracts. Please run 'devkit avs devnet start'"
    exit 1
fi

echo $CONTEXT | gomplate -f .hourglass/config/aggregator-template.yaml -d 'ctx=stdin:/?type=application/json' > .hourglass/config/aggregator.yaml
echo $CONTEXT | gomplate -f .hourglass/config/executor-template.yaml -d 'ctx=stdin:/?type=application/json' > .hourglass/config/executor.yaml

# Run the Aggregator and Executor in docker containers
./.hourglass/scripts/run.sh

log "AVS components started successfully." 
