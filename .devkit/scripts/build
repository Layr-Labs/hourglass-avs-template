#!/usr/bin/env bash
set -e

# source in helper functions
source "$( dirname "${BASH_SOURCE[0]}" )/helpers/helpers.sh"

# Check if required tools are available
ensureMake
ensureForge
ensureDocker

log "Building contracts..."
(cd .devkit/contracts && forge clean && forge build -- --include ../../contracts/**/*.sol && cd -) >&2

# Build the contracts and dependencies (includes multi-arch container build)
log "Building AVS performer..."
BUILD_CONTAINER=true ./.hourglass/scripts/build.sh >&2

# Get the image name from build.yaml
IMAGE_NAME=$(yq eval '.container.image' .hourglass/build.yaml)
REGISTRY=$(yq eval '.container.registry' .hourglass/build.yaml)
VERSION=$(yq eval '.container.version' .hourglass/build.yaml)

LOCAL_IMAGE_NAME="${IMAGE_NAME}:${VERSION}"

# Read the individual platform image IDs and manifest digest
if [ -f "/tmp/multiarch_image_ids" ]; then
  source /tmp/multiarch_image_ids
  log "Multi-platform images built:"
  log "  AMD64: $AMD64_IMAGE_ID"
  log "  ARM64: $ARM64_IMAGE_ID"
else
  # Fallback to image names if IDs not found
  AMD64_IMAGE_ID="${LOCAL_IMAGE_NAME}-amd64"
  ARM64_IMAGE_ID="${LOCAL_IMAGE_NAME}-arm64"
  MANIFEST_DIGEST=""
fi

# If empty , log it 
if [ "$REGISTRY" == "null" ] || [ -z "$REGISTRY" ]; then
    log "Registry Url empty in .hourglass/build.yaml.Passing empty registry url to context. Provide registry url explicitly while calling `devkit avs release publish`"
    REGISTRY_URL=""
else
    REGISTRY_URL="${REGISTRY}"
fi

# Create and output the JSON structure with both image IDs and manifest digest
RESULT=$(jq -n \
    --arg component "performer" \
    --arg amd64Id "$AMD64_IMAGE_ID" \
    --arg arm64Id "$ARM64_IMAGE_ID" \
    --arg digest "$MANIFEST_DIGEST" \
    --arg registry "$REGISTRY_URL" \
    '{
        artifacts: {
            component: $component,
            amd64_image_id: $amd64Id,
            arm64_image_id: $arm64Id,
            digest: $digest,
            registry_url: $registry
        }
    }')

# Print the JSON to stdout
echo "$RESULT" | jq -c .

log "Build completed successfully."
log "Updated artifacts field in context with image ids: AMD64=$AMD64_IMAGE_ID, ARM64=$ARM64_IMAGE_ID"
log "Multi-platform manifest digest: $MANIFEST_DIGEST"
