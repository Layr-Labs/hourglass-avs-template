#!/usr/bin/env bash
set -e

# source in helper functions
source "$( dirname "${BASH_SOURCE[0]}" )/helpers/helpers.sh"

# Check if required tools are available
ensureMake
ensureForge
ensureDocker

# Parse arguments for architectures flag
ARCHITECTURES=""
REGISTRY_URL=""

while [[ $# -gt 0 ]]; do
  case $1 in
    --architectures)
      ARCHITECTURES="$2"
      shift 2
      ;;
    --registry-url)
      REGISTRY_URL="$2"
      shift 2
      ;;
    *)
      echo "Unknown option $1"
      exit 1
      ;;
  esac
done

log "Building contracts..."
(cd .devkit/contracts && forge clean && forge build -- --include ../../contracts/**/*.sol && cd -) >&2

# Build the contracts and dependencies - pass through arguments
log "Building AVS performer..."
if [ -n "$ARCHITECTURES" ]; then
  if [ -n "$REGISTRY_URL" ]; then
    BUILD_CONTAINER=true ./.hourglass/scripts/build.sh --architectures "$ARCHITECTURES" --registry-url "$REGISTRY_URL" >&2
  else
    BUILD_CONTAINER=true ./.hourglass/scripts/build.sh --architectures "$ARCHITECTURES" >&2
  fi
else
  BUILD_CONTAINER=true ./.hourglass/scripts/build.sh >&2
fi

# Get the build info
if [ -f "/tmp/build_info" ]; then
  source /tmp/build_info
else
  echo "Error: Build info not found"
  exit 1
fi

# Handle different build scenarios
if [ "$MULTI_ARCH" = "true" ]; then
  # Multi-arch build - image already in registry
  log "Multi-architecture build completed"
  log "Image in registry: $IMAGE_NAME"
  
  # Use the Image Index digest from buildContainer.sh
  DIGEST="$IMAGE_DIGEST"
  
  # Create JSON output for multi-arch (already in registry)
  RESULT=$(jq -n \
      --arg component "performer" \
      --arg digest "$DIGEST" \
      --arg registry "$REGISTRY_URL" \
      '{
          artifacts: {
              component: $component,
              digest: $digest,
              registry_url: $registry
          }
      }')
  
  log "Updated artifacts field with registry digest: $DIGEST"
  
else
  # Single-arch local build - return empty context
  log "Local image: $IMAGE_NAME"
  
  RESULT=$(jq -n '{}')
  
  log "Returning empty context since not architecture was specified"
fi

# Print the JSON to stdout
echo "$RESULT" | jq -c .

log "Build completed successfully." 